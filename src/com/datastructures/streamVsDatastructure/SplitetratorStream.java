package com.datastructures.streamVsDatastructure;

import java.util.Arrays;
import java.util.Spliterator;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.StreamSupport;

public class SplitetratorStream {
    //Пришло время немного углубиться в работу Stream API изнутри. Элементы стримов нужно не только итерировать,
    // но ещё и разделять на части и отдавать другим потокам. За итерацию и разбиение отвечает Spliterator.
    // Он даже звучит как Iterator, только с приставкой Split — разделять.
    //
    //Методы интерфейса:
    //   - trySplit — как следует из названия, пытается разделить элементы на две части. Если это сделать не
    //   олучается, либо элементов недостаточно для разделения, то вернёт null. В остальных случаях возвращает
    //   ещё один Spliterator с частью данных.
    //   - tryAdvance​(Consumer action) — если имеются элементы, для которых можно применить действие, то оно
    //   применяется и возвращает true, в противном случае возвращается false, но действие не выполняется.
    //   - estimateSize() — возвращает примерное количество элементов, оставшихся для обработки, либо Long.MAX_VALUE,
    //   если стрим бесконечный или посчитать количество невозможно.
    //   - characteristics() — возвращает характеристики сплитератора.
    //
    // Характеристики
    //
    //В методе sorted и distinct было упомянуто, что если стрим помечен как отсортированный или содержащий уникальные
    // элементы, то соответствующие операции проводиться не будут. Вот характеристики сплитератора и влияют на это.
    //
    //   - DISTINCT — все элементы уникальны. Сплитераторы всех реализаций Set содержат эту характеристику.
    //   - SORTED — все элементы отсортированы.
    //   - ORDERED — порядок имеет значение. Сплитераторы большинства коллекций содержат эту характеристику,
    //   а HashSet, к примеру, нет.
    //   - SIZED — количество элементов точно известно.
    //   - SUBSIZED — количество элементов каждой разбитой части точно известно.
    //   - NONNULL — в элементах не встречается null. Некоторые коллекции из java.util.concurrent, в которые нельзя
    //   положить null, содержат эту характеристику.
    //   - IMMUTABLE — источник является иммутабельным и в него нельзя больше добавить элементов, либо удалить их.
    //   - CONCURRENT — источник лоялен к любым изменениям.
    //
    //Разумеется, характеристики могут быть изменены при выполнении цепочки операторов. Например, после sorted
    // добавляется характеристика SORTED, после filter теряется SIZED и т.д.

    public static void main(String[] args) {
        long count = StreamSupport.stream(
                Arrays.asList(0, 1, 2, 3).spliterator(), true)
                .count();
        System.out.println("-----------------------------------------------");
        //
        Spliterator<Integer> s = IntStream.range(0, 4)
                .boxed()
                .collect(Collectors.toSet())
                .spliterator();
        long count2 = StreamSupport.stream(s, true).count();
    }
}
